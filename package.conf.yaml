---
proc_list: []
port_list: []
proc_guard: ~
port_guard: ~
start_script: "  \n#限制core文件大小为4k,用于进程coredump监控  \n#ulimit -c 4 -S\n#ulimit -n 100000\n
  \ \n#-----单进程名程序包请在这添加启动命令-----  \n#./nginx\n  \n#-----多进程名程序包请在这添加启动命令-----  \n#每个进程复制一份if语句，注意保留if判断逻辑并修改内部的示例进程名app_test
  \ \n#变量app_to_start为需要启动的进程名,不需要修改  \n#if [ \"$app_to_start\" = \"app_test\" -o
  \"$app_to_start\" = \"all\" ];then  \n#    ./app_test\n#fi  \n"
user_pre_check_script: ""
user_check_script: ""
stop_script: |
  #!/usr/local/easyops/python/bin/python
  # _*_coding: utf-8_*_

  import os
  import subprocess
  import yaml

  restart_cmd = os.environ.get("EASYOPS_COLLECTOR_restart_cmd")
  collector_name = os.environ.get("EASYOPS_COLLECTOR_collector_name")
  rsyslog_conf_path = os.environ.get("EASYOPS_COLLECTOR_rsyslog_conf_path")


  def load_conf_file(conf_record_file="job_conf.ini"):
      try:
          with open(conf_record_file, "r") as f:
              content = f.read()
              conf = yaml.load(content)
              return conf
      except Exception as e:
          print e.message
          return {}


  def run_cmd(command, shell=False, close_fds=True):
      proc = subprocess.Popen(
          command,
          close_fds=close_fds,  # only set to True when on Unix, for WIN compatibility
          shell=shell,
          stdout=subprocess.PIPE,
          stderr=subprocess.PIPE,
      )
      proc.wait()
      output, err = proc.communicate()

      result = err or output
      return proc.returncode, result


  def unlink_conf(dst_file):
      rcode, output = run_cmd("rm -f {}".format(dst_file), shell=True)


  def get_conf_file_name(name):
      return os.path.join(name + ".conf")


  def run():
      recored_conf = load_conf_file()
      file_name = recored_conf.get("job_id", collector_name)
      conf_file = os.path.join(rsyslog_conf_path, get_conf_file_name(file_name))
      unlink_conf(conf_file)


  if __name__ == "__main__":
      run()
monitor_script: ""
user: root
baseImageId: ""
start_script_type: shell
user_pre_check_script_type: shell
user_check_script_type: shell
stop_script_type: shell
user_defined_global_variables: []
restart_script: ""
install_prescript: ""
install_postscript: ""
update_prescript: ""
update_postscript: ""
rollback_prescript: ""
rollback_postscript: ""
user_pre_check: ""
uninstall_prescript: ""
uninstall_postscript: ""
...
