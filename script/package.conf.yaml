---
script_source: easyops
start_component: ""
start_component_params: ""
stop_component: ""
stop_component_params: ""
proc_list: []
port_list: []
proc_guard: ""
port_guard: ""
start_script: ""
start_script_type: shell
user_pre_check_script: ""
user_pre_check_script_type: shell
user_check_script: ""
user_check_script_type: shell
stop_script: |
  #!/usr/local/easyops/python/bin/python
  # _*_coding: utf-8_*_

  import os
  import subprocess
  import yaml
  import glob


  restart_cmd = os.environ.get("EASYOPS_COLLECTOR_restart_cmd")
  collector_name = os.environ.get("EASYOPS_COLLECTOR_collector_name")
  rsyslog_conf_path = os.environ.get("EASYOPS_COLLECTOR_rsyslog_conf_path")

  RSYSLOG_CONF_MD5_KEY = "rsyslog_conf_md5_map"
  file_prefix = u"easyops_rsyslog_job_conf_{}"
  record_file = u"src/conf_record/job_conf_*.ini"


  def load_conf_file(conf_record_file="job_conf.ini"):
      try:
          with open(conf_record_file, "r") as f:
              content = f.read()
              conf = yaml.load(content)
              return conf
      except Exception as e:
          print e.message
          return {}


  def run_cmd(command, shell=False, close_fds=True):
      proc = subprocess.Popen(
          command,
          close_fds=close_fds,  # only set to True when on Unix, for WIN compatibility
          shell=shell,
          stdout=subprocess.PIPE,
          stderr=subprocess.PIPE,
      )
      proc.wait()
      output, err = proc.communicate()

      result = err or output
      return proc.returncode, result


  def unlink_conf(dst_file):
      return run_cmd("rm -f {}".format(dst_file), shell=True)


  def get_conf_file_name(name):
      return os.path.join(name + ".conf")


  def restart_rsyslog(cmd="service rsyslog restart"):
      return run_cmd(cmd, shell=True)


  def get_all_file(file_regex):
      return glob.glob(file_regex)


  def run():
      real_restart_cmd = ""
      for file_name in get_all_file(record_file):
          recorded_conf = load_conf_file(file_name)
          conf_map = recorded_conf.get(RSYSLOG_CONF_MD5_KEY, collector_name)
          real_restart_cmd = recorded_conf.get("restart_cmd", restart_cmd)
          real_rsyslog_conf_path = recorded_conf.get("rsyslog_conf_path", restart_cmd)
          for file_name, md5 in conf_map.iteritems():
              conf_file = os.path.join(real_rsyslog_conf_path, get_conf_file_name(file_prefix.format(md5)))
              print "will delete conf {}".format(conf_file)
              print unlink_conf(conf_file)
      print restart_rsyslog(real_restart_cmd)


  if __name__ == "__main__":
      run()
stop_script_type: python
monitor_script: ""
user: root
user_defined_global_variables: []
baseImageId: ""
install_postscript: ""
install_prescript: ""
resolve_script: ""
restart_script: ""
rollback_postscript: ""
rollback_prescript: ""
update_postscript: ""
update_prescript: ""
uninstall_prescript: ""
uninstall_postscript: ""
...
